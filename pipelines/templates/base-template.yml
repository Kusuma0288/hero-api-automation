parameters:
  - name: SlackWebHookUrl
    type: string
    default: https://hooks.slack.com/services/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

  - name: TestRunTitle
    type: string
    default: Automation Run Report

  - name: Profile
    type: string

  - name: ClusterUrl
    type: string
    default: https://wowuatmobileautoreports.z8.web.core.windows.net

  - name: RunEnv
    type: string
    default: uat

  - name: Service
    type: string

steps:
  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      checkStyleRunAnalysis: true
      goals: 'checkstyle:checkstyle'
    displayName: 'Run maven checkstyle'
    continueOnError: true

  - powershell: |
      $XMLfile = '$(Build.SourcesDirectory)/target/checkstyle-result.xml'
      [XML]$errorDetails = Get-Content $XMLfile

      $rows = $errorDetails.checkstyle.file.error
      if($rows.count -gt 0){
        echo $rows
        throw "Build failed. Please check the lint errors."
      }

    displayName: 'Analysing Code linting results'
    continueOnError: false
    condition: always()

  - task: DockerCompose@0
    displayName: 'Execute Tests'
    inputs:
      dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
      dockerComposeCommand: 'run --entrypoint="mvn clean verify -P${{ parameters.Profile }} -Denv=${{ parameters.RunEnv }} -DsaveRequestResponse=yes" tests'
    continueOnError: false
    condition: succeeded()

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/failsafe-reports/TEST-*.xml'
      searchFolder: '$(Build.SourcesDirectory)'
      mergeTestResults: true
    continueOnError: true
    condition: succeeded()

  - script: |
      echo "--Giving permissions to update target directory--"
      cd $(Build.SourcesDirectory)
      ls
      sudo chmod -R 0777 target/
      echo "--Installing python dependencies--"
      cd /usr/lib
      pip install jsonpath-rw-ext
      pip install matplotlib
      sudo apt-get install python-tk

    displayName: 'Install dependencies for Python'
    continueOnError: true
    condition: succeeded()

  - task: PythonScript@0
    inputs:
      scriptSource: 'filePath'
      scriptPath: '$(Build.SourcesDirectory)/src/test/resources/slack_reporting.py'
      arguments: '$(Build.SourcesDirectory)'
    displayName: 'Execute Python script'
    continueOnError: true
    condition: succeeded()

  - powershell: |
      az storage blob upload-batch `
       --account-key 'qzySpscvrIRAlI1W/WBKEDLG7mdFh4l1thcKewSfcJmoff0A+fNpvvAB6eASFBJYWRMCi7hw+arzJyKUmWWI+Q==' `
       --account-name wowuatmobileautoreports `
       --destination '$web/${{ parameters.Service }}_${{ parameters.RunEnv }}_$(Build.BuildNumber)' `
       --source '$(Build.SourcesDirectory)/target/cucumber-reports/'

    displayName: 'Post test results to Azure blob storage'
    continueOnError: true
    condition: succeeded()

  - powershell: |
      $returnValues = &'$(Build.SourcesDirectory)/postResultToSlack.ps1' -ClusterUrl '${{ parameters.ClusterUrl }}' `
               -Service '${{ parameters.Service }}' -RunEnv '${{ parameters.RunEnv }}' -BuildNumber '$(Build.BuildNumber)' `
               -TestRunTitle '${{ parameters.TestRunTitle }}' -SlackWebhookUrl '${{ parameters.SlackWebHookUrl }}' `
               -SourceBranchName '$(Build.SourceBranchName)' -Profile '${{ parameters.Profile }}'

      $total_failures = $returnValues.currentFailures.Trim()
      echo "total_failures=" $total_failures

      ##functions: Start
      function updateVariableGroup {
        param ([string]$VarName)
        az pipelines variable-group variable update --org https://dev.azure.com/wowonline/ -p Mobile --group-id 717 --name $VarName --value $total_failures --output yaml
      }
      ##functions: End

      ##Code to validate the failure count
      if('${{ parameters.Service }}' -eq 'apigee' -AND '${{ parameters.RunEnv }}' -eq 'uat'){
          echo $(System.AccessToken) | az devops login
          $lastApigeeFailCount = $(Apigee_UAT_LastFailCount)
          $lastApigeeFailCount = $lastApigeeFailCount.toString().Trim()

          $newFailures = [int]$total_failures - [int]$lastApigeeFailCount
          if([int]$newFailures -gt 0){
                 Write-Host "##vso[task.logissue type=error]There are $newFailures new failures in this run"
                 echo "Status below :  "
                 echo "Apigee build failed. Details below: "
                 echo "Current failures: " $returnValues.currentFailures
                 echo "Last failures count: " $lastApigeeFailCount
                 echo "Report URL: " $returnValues.reportURL
          }
          updateVariableGroup -VarName 'Apigee_UAT_LastFailCount'
          echo "newFailures" $newFailures

      }
      elseif('${{ parameters.Service }}' -eq 'trader' -AND '${{ parameters.RunEnv }}' -eq 'uat'){
          echo $(System.AccessToken) | az devops login
          $lastTraderFailCount = $(Trader_UAT_LastFailCount)
          $lastTraderFailCount = $lastTraderFailCount.toString().Trim()
          $newFailures = [int]$total_failures - [int]$lastTraderFailCount

          if([int]$newFailures -gt 0){
             Write-Host "##vso[task.logissue type=error]There are $newFailures new failures in this run"
             echo "Status below :  "
             echo "Trader build failed. Details below: "
             echo "Current failures: " $returnValues.currentFailures
             echo "Last failures count: " $(Trader_UAT_LastFailCount)
             echo "Report URL: " $returnValues.reportURL
         }
         updateVariableGroup -VarName 'Trader_UAT_LastFailCount'
      }

    displayName: 'Post test results to Slack'
    continueOnError: true
    condition: and(succeeded(), ne('${{ parameters.SlackWebhookUrl }}', ''))
