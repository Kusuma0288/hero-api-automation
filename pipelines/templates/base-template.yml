parameters:
  - name: SlackWebHookUrl
    type: string
    default: https://hooks.slack.com/services/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

  - name: TestRunTitle
    type: string
    default: Automation Run Report

  - name: Profile
    type: string

  - name: ClusterUrl
    type: string
    default: https://wowuatmobileautoreports.z8.web.core.windows.net

  - name: RunEnv
    type: string
    default: uat

  - name: Service
    type: string

steps:
  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      checkStyleRunAnalysis: true
      goals: 'checkstyle:checkstyle'
    displayName: 'Run maven checkstyle'
    continueOnError: true

  - powershell: |
      $XMLfile = '$(Build.SourcesDirectory)/target/checkstyle-result.xml'
      [XML]$errorDetails = Get-Content $XMLfile

      $rows = $errorDetails.checkstyle.file.error
      if($rows.count -gt 0){
           echo $rows
           throw "Build failed. Please check the lint errors."
      }

    displayName: 'Analysing Code linting results'
    continueOnError: false
    condition: always()

  - task: DockerCompose@0
    displayName: 'Execute Tests'
    inputs:
      dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
      dockerComposeCommand: 'run --entrypoint="mvn clean verify test -P${{ parameters.Profile }} -Denv=${{ parameters.RunEnv }} -DsaveRequestResponse=yes" tests'
    continueOnError: true
    condition: succeeded()

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junitreports/TEST-*.xml'
      searchFolder: '$(Build.SourcesDirectory)'
      mergeTestResults: true
    continueOnError: true
    condition: succeeded()

  - script: |
      echo "--Giving permissions to update target directory--"
      echo "--Testing directory--"
      cho "--Python version--"
      python ––version
      sudo apt install python3.8
      echo "--Python version again--"
      python ––version
      cd $(Build.SourcesDirectory)
      ls
      sudo chmod -R 0777 target/
      echo "--Installing python dependencies--"
      cd /usr/lib
      pip install wheel
      sudo apt-get install python-dev
      pip install --upgrade setuptools
      pip install jsonpath-rw-ext
      pip install matplotlib
      sudo apt-get install python-tk

    displayName: 'Install dependencies for Python'
    continueOnError: true
    condition: succeeded()

  - task: PythonScript@0
    inputs:
      scriptSource: 'filePath'
      scriptPath: '$(Build.SourcesDirectory)/src/test/resources/slack_reporting.py'
      arguments: '$(Build.SourcesDirectory)'
    displayName: 'Execute Python script'
    continueOnError: true
    condition: succeeded()

  - powershell: |
      az storage blob upload-batch `
       --account-key 'qzySpscvrIRAlI1W/WBKEDLG7mdFh4l1thcKewSfcJmoff0A+fNpvvAB6eASFBJYWRMCi7hw+arzJyKUmWWI+Q==' `
       --account-name wowuatmobileautoreports `
       --destination '$web/${{ parameters.Service }}_${{ parameters.RunEnv }}_$(Build.BuildNumber)' `
       --source '$(Build.SourcesDirectory)/target/cucumber-reports/'

    displayName: 'Post test results to Azure blob storage'
    continueOnError: true
    condition: succeeded()

  - powershell: |
      $returnValues = &'$(Build.SourcesDirectory)/postResultToSlack.ps1' -ClusterUrl '${{ parameters.ClusterUrl }}' `
               -Service '${{ parameters.Service }}' -RunEnv '${{ parameters.RunEnv }}' -BuildNumber '$(Build.BuildNumber)' `
               -TestRunTitle '${{ parameters.TestRunTitle }}' -SlackWebhookUrl '${{ parameters.SlackWebHookUrl }}' `
               -SourceBranchName '$(Build.SourceBranchName)'

      $total_failures = $returnValues.currentFailures.Trim()
      echo "total_failures=" $total_failures

      $lastApigeeFailCount = $(Apigee_UAT_LastFailCount)
      $lastApigeeFailCount = $lastApigeeFailCount.toString().Trim()
      echo "lastApigeeFailCount=" $lastApigeeFailCount


      $PROJECT= "Mobile"
      $ORGANIZATION_URL="https://dev.azure.com/wowonline/"
      ##functions: Start
      function updateVariableGroup {
       param ([string]$VarName)
       az pipelines variable-group variable update --org $ORGANIZATION_URL -p $PROJECT --group-id 717 --name $VarName --value $total_failures --output yaml

      }
      ##functions: End
      ##Code to validate the failure count

      echo $(System.AccessToken) | az devops login --org $ORGANIZATION_URL

      if('${{ parameters.Service }}' -eq 'apigee' -And '${{ parameters.RunEnv }}' -eq 'uat'){
          if([int]$total_failures -gt [int]$lastApigeeFailCount){
              Write-Host "##vso[task.setvariable variable=buildStatus;]FAIL"
              echo "Apigee build failed. Details below: "
              echo "Current failures: " $returnValues.currentFailures
              echo "Last failures count: " $lastApigeeFailCount
              echo "Report URL: " $returnValues.reportURL
          }
          else{
              Write-Host "##vso[task.setvariable variable=buildStatus;]PASS"

          }
          echo "Total Failures:" $total_failures
          echo "Source Branch:" $(Build.SourceBranchName)
          updateVariableGroup -VarName 'Apigee_UAT_LastFailCount' -ORGANIZATION_URL $ORGANIZATION_URL -PROJECT $PROJECT

      }
      elseif('${{ parameters.Service }}' -eq 'trader' -And '${{ parameters.RunEnv }}' -eq 'uat'){
          if($total_failures -gt $(Trader_UAT_LastFailCount)){
              Write-Host "##vso[task.setvariable variable=buildStatus;]FAIL"
              echo "Trader build failed. Details below: "
              echo "Current failures: " $returnValues.currentFailures
              echo "Last failures count: " $(Trader_UAT_LastFailCount)
              echo "Report URL: " $returnValues.reportURL
          }
          else{
              Write-Host "##vso[task.setvariable variable=buildStatus;]PASS"
              updateVariableGroup -VarName 'Trader_UAT_LastFailCount' -ORGANIZATION_URL $ORGANIZATION_URL -PROJECT $PROJECT
          }

      }
      az devops logout

    displayName: 'Post test results to Slack'
    continueOnError: true
    condition: and(succeeded(), ne('${{ parameters.SlackWebhookUrl }}', ''))

  - powershell: |
      if('$(buildStatus)' -eq 'FAIL' -And '$(Build.Reason)' -eq 'PullRequest'){
        throw "Build failed. Please check the new failures."
      }

    displayName: 'Check the run results'
    continueOnError: false
    condition: always()